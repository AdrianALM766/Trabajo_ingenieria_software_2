package Gestiones;

import GestionCorreos.EnviarCorreo;
import java.net.InetAddress;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Random;

public class GestionesVarias {

    private static int codigoVerificacion;

    public boolean validarUsuarioInicioSesion(String usuario, String password) {
        // üö© Validaciones iniciales para evitar que se env√≠en datos vac√≠os o nulos
        if (usuario == null || usuario.isEmpty()) {
            System.out.println("‚ùå El correo de usuario est√° vac√≠o.");
            return false;
        }

        if (password == null || password.isEmpty()) {
            System.out.println("‚ùå La contrase√±a est√° vac√≠a.");
            return false;
        }

        try (Connection conn = ConexionBaseDatos.conectar()) {
            // Connection: objeto que representa la conexi√≥n activa con la base de datos.
            // Aqu√≠ se obtiene llamando a una clase "ConexionBaseDatos" que abre la conexi√≥n.

            // Consulta SQL que devuelve la contrase√±a encriptada de un usuario espec√≠fico
            String sql = "SELECT contrase√±a FROM usuarios WHERE correo = ?";

            // PreparedStatement: se usa para ejecutar consultas SQL seguras con par√°metros.
            // El "?" es un placeholder que evita SQL Injection (ataques de inyecci√≥n de c√≥digo).
            PreparedStatement stmt = conn.prepareStatement(sql);

            // Se reemplaza el "?" con el valor real que escribi√≥ el usuario (su correo)
            stmt.setString(1, usuario);

            // ResultSet: representa la tabla de resultados que devuelve la consulta SQL
            ResultSet rs = stmt.executeQuery();

            // Si no hay resultados, significa que no existe ning√∫n usuario con ese correo
            if (!rs.next()) {
                System.out.println("‚ùå No existe ning√∫n usuario con el correo: " + usuario);
                return false; // salir de inmediato
            }

            // Si existe el usuario, se obtiene la contrase√±a encriptada de la base de datos
            String hashAlmacenado = rs.getString("contrase√±a");

            // Encriptar.encoder.matches: compara la contrase√±a que ingres√≥ el usuario (texto plano)
            // con el hash encriptado que est√° en la base de datos. Devuelve true si coinciden.
            if (!Encriptar.encoder.matches(password, hashAlmacenado)) {
                System.out.println("‚ùå La contrase√±a no coincide para el usuario: " + usuario);
                return false;
            }

            // ‚úÖ Si todo est√° correcto (correo existe y la contrase√±a coincide)
            System.out.println("‚úÖ Inicio de sesi√≥n exitoso para: " + usuario);
            return true;

        } catch (SQLException e) {
            // SQLException: representa cualquier error que ocurra al interactuar con la base de datos
            System.out.println("‚ùå Error en la base de datos: " + e.getMessage());
            return false;
        }
    }

    /**
     * Intenta registrar un usuario en la tabla `usuarios`. - Valida campos
     * vac√≠os (fail-fast). - Verifica si el nombre de usuario ya existe
     * (usuarioExiste). - Verifica si el correo ya existe (correoExiste). -
     * Encripta la contrase√±a y hace el INSERT si todo est√° OK.
     *
     * Nota: estas validaciones evitan malas UX, pero la unicidad real debe
     * estar garantizada por restricciones UNIQUE en la base de datos (para
     * evitar condiciones de carrera).
     */
    public static boolean registrarUsuario(String usuario, String correo, String contrasena) {
        // üö© Validaciones iniciales (fail-fast)
        if (usuario == null || usuario.isEmpty()) {
            System.out.println("‚ùå El nombre de usuario est√° vac√≠o.");
            return false;
        }

        if (correo == null || correo.isEmpty()) {
            System.out.println("‚ùå El correo est√° vac√≠o.");
            return false;
        }

        if (contrasena == null || contrasena.isEmpty()) {
            System.out.println("‚ùå La contrase√±a est√° vac√≠a.");
            return false;
        }

        // üîç Verificar si el nombre de usuario ya est√° en uso
        if (usuarioExiste(usuario)) {
            System.out.println("‚ùå El nombre de usuario ya est√° en uso: " + usuario);
            return false;
        }

        // üîç Verificar si el correo ya est√° en uso
        if (correoExiste(correo)) {
            System.out.println("‚ùå El correo ya est√° en uso: " + correo);
            return false;
        }

        // Preparar la sentencia INSERT
        String sqlInsert = "INSERT INTO usuarios (usuario, correo, `contrase√±a`) VALUES (?, ?, ?)";
        // Encriptar la contrase√±a antes de guardarla (por ejemplo con BCrypt)
        String pass = Encriptar.encriptarContrasena(contrasena);

        // try-with-resources: garantiza cierre autom√°tico de recursos (Connection, PreparedStatement)
        try (Connection conn = ConexionBaseDatos.conectar(); PreparedStatement pstmt = conn.prepareStatement(sqlInsert)) {

            // Connection: representa la conexi√≥n a la base de datos (socket, credenciales, etc.)
            // PreparedStatement: consulta precompilada que admite par√°metros (?) para evitar inyecci√≥n SQL.
            // Asignamos los par√°metros de la consulta a los valores reales:
            pstmt.setString(1, usuario); // primer "?"
            pstmt.setString(2, correo);  // segundo "?"
            pstmt.setString(3, pass);    // tercer "?"

            // executeUpdate ejecuta INSERT/UPDATE/DELETE y devuelve n√∫mero de filas afectadas
            int filas = pstmt.executeUpdate();

            if (filas <= 0) {
                System.out.println("‚ùå No se pudo registrar el usuario: " + usuario);
                return false;
            }

            System.out.println("‚úÖ Usuario registrado correctamente: " + usuario);
            return true;

        } catch (SQLException e) {
            // SQLException: cualquier error durante la operaci√≥n con la base de datos.
            // Puede ser por conexi√≥n, constraints (clave duplicada), timeouts, etc.
            System.out.println("‚ùå Error al registrar usuario: " + e.getMessage());
            return false;
        }
    }

    /**
     * Comprueba si un correo ya existe en la tabla `usuarios`. - Usa SELECT con
     * par√°metro para evitar inyecci√≥n SQL. - Devuelve true si encuentra al
     * menos una fila.
     */
    public static boolean correoExiste(String correo) {
        String sql = "SELECT 1 FROM usuarios WHERE correo = ? LIMIT 1";
        // try-with-resources para garantizar el cierre de Connection, PreparedStatement y ResultSet
        try (Connection conn = ConexionBaseDatos.conectar(); PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // PreparedStatement: permite asignar par√°metros seguros al SQL
            pstmt.setString(1, correo);

            // ResultSet: representa la tabla de resultados devuelta por la consulta.
            try (ResultSet rs = pstmt.executeQuery()) {
                // rs.next() -> true si hay al menos una fila (el correo ya existe)
                return rs.next();
            }

        } catch (SQLException e) {
            System.out.println("‚ùå Error al verificar correo: " + e.getMessage());
            // En caso de error asumimos que no existe (o podr√≠as preferir devolver true para bloquear registro)
            return false;
        }
    }

    /**
     * Comprueba si un nombre de usuario ya existe en la tabla `usuarios`. Misma
     * idea que correoExiste, pero buscando por la columna 'usuario'.
     */
    public static boolean usuarioExiste(String usuario) {
        String sql = "SELECT 1 FROM usuarios WHERE usuario = ? LIMIT 1";
        try (Connection conn = ConexionBaseDatos.conectar(); PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, usuario);

            try (ResultSet rs = pstmt.executeQuery()) {
                return rs.next();
            }

        } catch (SQLException e) {
            System.out.println("‚ùå Error al verificar usuario: " + e.getMessage());
            return false;
        }
    }

// IMPORTANTE: este c√≥digo usa clases de java.net
// import java.net.InetAddress;
    /**
     * Obtiene informaci√≥n b√°sica de red de la m√°quina local.
     *
     * @return Un arreglo de 2 posiciones: - [0] = nombre del host local
     * (hostname). - [1] = direcci√≥n IP asociada al host.
     *
     * üìå Ejemplo de salida: ["MiPC", "192.168.1.10"]
     *
     * üîé Detalles t√©cnicos: - InetAddress: clase que representa una direcci√≥n
     * IP (IPv4 o IPv6). Proporciona m√©todos para obtener el nombre de host y su
     * direcci√≥n IP. - getLocalHost(): devuelve la direcci√≥n IP de la m√°quina
     * local. - getHostName(): devuelve el nombre asignado al host local (ej:
     * "MiPC"). - getHostAddress(): devuelve la direcci√≥n IP en formato de texto
     * (ej: "192.168.1.10"). - Exception: captura cualquier error (ej: si no se
     * puede resolver la IP o el host).
     *
     */
    public String[] obtenerDireccionIp() {
        // Arreglo que almacenar√° el hostname [0] y la IP [1]
        String info[] = new String[2];
        // Variables temporales
        String local = "", ip = "";

        try {
            // InetAddress.getLocalHost() devuelve el objeto con datos del host local
            InetAddress localHost = InetAddress.getLocalHost();

            // Obtener el nombre del host (ej: "MiPC")
            local = localHost.getHostName();

            // Obtener la direcci√≥n IP (ej: "192.168.1.10")
            ip = localHost.getHostAddress();

            // Guardar los datos en el arreglo
            info[0] = local;
            info[1] = ip;

        } catch (Exception e) {
            // Si ocurre un error al obtener la informaci√≥n, lo mostramos en consola
            e.printStackTrace();
        }

        // Devolver el arreglo con hostname e IP
        return info;
    }

    public String obtenerHora() {
        // Obtener la fecha y hora actual con zona horaria
        ZonedDateTime ahora = ZonedDateTime.now();

        // Definir el formato de salida para la fecha y hora
        DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss ");

        // Aplicar el formato y convertir la fecha/hora a texto
        String fechaHora = ahora.format(formato);

        // Devolver la fecha y hora como cadena
        return fechaHora;
    }

    public int codidoVerificacion(String correo) {
        // Instancia de la clase encargada de enviar correos
        EnviarCorreo enviar = new EnviarCorreo();
        String asunto = "C√≥digo de verificaci√≥n";

        // Generar un c√≥digo aleatorio de 4 d√≠gitos entre 1000 y 9999
        Random random = new Random();
        int codigo = 1000 + random.nextInt(9000);

        // Guardar el c√≥digo en la clase GestionesVarias (para validaci√≥n posterior)
        GestionesVarias.setCodigoVerificacion(codigo);

        // Crear el contenido del mensaje que recibir√° el usuario
        String mensaje = "Hola,\n\n"
                + "Tu c√≥digo de verificaci√≥n es: " + codigo + "\n\n"
                + "Por favor, ingresa este c√≥digo en la aplicaci√≥n para confirmar tu identidad.\n"
                + "‚ö†Ô∏è Este c√≥digo es v√°lido solo por 10 minutos.\n\n"
                + "Si no solicitaste este c√≥digo, ignora este mensaje.\n\n"
                + "Gracias,\n"
                + "El equipo de Inventario K1";

        // Enviar el correo con el asunto y el mensaje al destinatario
        enviar.enviarCorreo(correo, asunto, mensaje);

        // Retornar el c√≥digo generado (√∫til si se necesita en la l√≥gica interna)
        return codigo;
    }

// Verificar si un usuario es administrador
    public static boolean esAdmin(String usuario) {
        // Consulta SQL que une usuarios con su rol correspondiente
        String sql = """
        SELECT r.numero_rol
        FROM usuarios u
        JOIN rol r ON u.id_usuario = r.id_usuario
        WHERE u.usuario = ?
    """;

        // try-with-resources: asegura que Connection y PreparedStatement se cierren autom√°ticamente
        try (Connection conn = ConexionBaseDatos.conectar(); PreparedStatement stmt = conn.prepareStatement(sql)) {

            // Asignar el valor del usuario al par√°metro de la consulta
            stmt.setString(1, usuario);

            // Ejecutar la consulta
            ResultSet rs = stmt.executeQuery();

            // Si existe un resultado, verificamos el n√∫mero de rol
            if (rs.next()) {
                return rs.getInt("numero_rol") == 1; // true si es administrador
            }

        } catch (SQLException e) {
            e.printStackTrace(); // Mostrar el error en consola
        }

        // Si no se encontr√≥ el usuario o hubo error, no es admin
        return false;
    }

    // Asignar rol a otro usuario (solo lo hace un admin)
    public static boolean asignarRol(String adminUsuario, String targetUsuario, int nuevoRol) {
        // üö® Validaci√≥n de permisos: 
        // Solo se permite continuar si el usuario que ejecuta la acci√≥n es administrador.
        if (!esAdmin(adminUsuario)) {
            System.out.println("‚ùå Solo un administrador puede asignar roles.");
            return false;
        }

        try (Connection conn = ConexionBaseDatos.conectar()) {

            // 1Ô∏è‚É£ Obtener el ID √∫nico del usuario al que se le quiere asignar el rol.
            // Si el usuario no existe en la base de datos, se detiene la operaci√≥n.
            int usuarioId = getIdUsuario(conn, targetUsuario);
            if (usuarioId == -1) {
                System.out.println("‚ùå El usuario destino no existe.");
                return false;
            }

            // 2Ô∏è‚É£ Verificar si este usuario ya tiene un rol registrado en la tabla `rol`.
            if (usuarioTieneRol(conn, usuarioId)) {
                // ‚úÖ Caso A: El usuario ya tiene rol ‚Üí Se actualiza con el nuevo valor.
                actualizarRol(conn, usuarioId, nuevoRol);
                System.out.println("‚úÖ Rol actualizado correctamente.");
            } else {
                // ‚úÖ Caso B: El usuario no tiene rol ‚Üí Se inserta uno nuevo en la base de datos.
                insertarRol(conn, usuarioId, nuevoRol);
                System.out.println("‚úÖ Rol asignado correctamente.");
            }

            return true; // Operaci√≥n exitosa.

        } catch (SQLException e) {
            // üö® Manejo de errores en caso de fallo de conexi√≥n o sentencia SQL.
            e.printStackTrace();
        }

        return false; // Si hubo alguna excepci√≥n o fallo.
    }

    private static int getIdUsuario(Connection conn, String usuario) throws SQLException {
        // Consulta SQL para obtener el id_usuario a partir del nombre de usuario
        String sql = "SELECT id_usuario FROM usuarios WHERE usuario = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            // Se asigna el valor del nombre de usuario al par√°metro de la consulta
            stmt.setString(1, usuario);
            // Se ejecuta la consulta
            ResultSet rs = stmt.executeQuery();
            // Si existe el usuario, retorna su id_usuario
            if (rs.next()) {
                return rs.getInt("id_usuario");
            }
        }
        // Retorna -1 si no se encontr√≥ el usuario
        return -1;
    }

    private static boolean usuarioTieneRol(Connection conn, int usuarioId) throws SQLException {
        // Consulta SQL para verificar si un usuario ya tiene un rol asignado
        String sql = "SELECT 1 FROM rol WHERE id_usuario = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            // Se asigna el valor del id_usuario al par√°metro de la consulta
            stmt.setInt(1, usuarioId);
            // Se ejecuta la consulta
            ResultSet rs = stmt.executeQuery();
            // Retorna true si existe un registro asociado, false en caso contrario
            return rs.next();
        }
    }

    private static void insertarRol(Connection conn, int usuarioId, int nuevoRol) throws SQLException {
        // Consulta SQL para insertar un nuevo rol a un usuario
        String sql = "INSERT INTO rol (id_usuario, numero_rol) VALUES (?, ?)";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            // Se asignan los valores del usuario y el rol al INSERT
            stmt.setInt(1, usuarioId);
            stmt.setInt(2, nuevoRol);
            // Se ejecuta la inserci√≥n
            stmt.executeUpdate();
        }
    }

    private static void actualizarRol(Connection conn, int usuarioId, int nuevoRol) throws SQLException {
        // Consulta SQL para actualizar el rol de un usuario existente
        String sql = "UPDATE rol SET numero_rol = ? WHERE id_usuario = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            // Se asignan los nuevos valores al UPDATE
            stmt.setInt(1, nuevoRol);
            stmt.setInt(2, usuarioId);
            // Se ejecuta la actualizaci√≥n
            stmt.executeUpdate();
        }
    }

    // Validaci√≥n de confirmaci√≥n
    public static boolean confirmarAccion() {

        return true;
    }

    /*
    // Validaci√≥n de contrase√±a
    public static boolean validarContrasena(String contrasenaIngresada) {
        String CLAVE_CORRECTA = "1234";
        return contrasenaIngresada.equals(CLAVE_CORRECTA);
    }

    // L√≥gica de eliminaci√≥n
    public static void eliminarUsuario(String usuario) {
        System.out.println("‚úÖ Usuario " + usuario + " eliminado de la base de dato");
    }**/
    public static int getCodigoVerificacion() {
        return codigoVerificacion;
    }

    public static void setCodigoVerificacion(int codigo) {
        codigoVerificacion = codigo;
    }
}
